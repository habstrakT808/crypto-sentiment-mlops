version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: crypto_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - crypto_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: crypto_redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - crypto_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  mlflow:
    build:
      context: .
      dockerfile: docker/Dockerfile.mlflow
    container_name: crypto_mlflow
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=./mlflow_artifacts
    volumes:
      - ./mlflow_artifacts:/app/mlflow_artifacts
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - crypto_network
    command: >
      mlflow server
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      --default-artifact-root /app/mlflow_artifacts
      --host 0.0.0.0
      --port 5000

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  crypto_network:
    driver: bridge