services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: crypto_postgres_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - crypto_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: crypto_redis_prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - crypto_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # MLflow Tracking
  mlflow:
    build:
      context: .
      dockerfile: docker/Dockerfile.mlflow
    container_name: crypto_mlflow_prod
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=./mlflow_artifacts
    volumes:
      - ./mlflow_artifacts:/app/mlflow_artifacts
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - crypto_network
    restart: unless-stopped

  # Sentiment API
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: crypto_api_prod
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=production
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_PORT=6379
    volumes:
      - ./models:/app/models:ro
      - ./data:/app/data:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - crypto_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Streamlit Dashboard
  dashboard:
    build:
      context: .
      dockerfile: docker/Dockerfile.dashboard
    container_name: crypto_dashboard_prod
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://api:8000
      - STREAMLIT_SERVER_HEADLESS=true
    volumes:
      - ./models:/app/models:ro
      - ./data:/app/data:ro
    depends_on:
      - api
    networks:
      - crypto_network
    restart: unless-stopped

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  crypto_network:
    driver: bridge